

/**
 * Return an array of arrays of size *returnSize.
 * The sizes of the arrays are returned as *returnColumnSizes array.
 * Note: Both returned array and *columnSizes array must be malloced, assume caller calls free().
 */
int** generate(int numRows, int* returnSize, int** returnColumnSizes){
    int i, j;
    int **q;
    
    *returnSize = numRows;
    
   // **q= *returnColumnSizes;
    
    q= (int**)malloc(sizeof(int*)*numRows);
    for(i=0;i<numRows;i++)
    {
        q[i]= (int*)malloc(sizeof(int)*(i+1));
    }
    
    *returnColumnSizes = (int*) malloc(sizeof(int)*numRows);
    for(i=0;i<numRows;i++)
     {
        (*returnColumnSizes)[i] = i+1;
    }
    
    //int numarray[numRows][q];
    for(i=0;i<numRows;i++)
    {
        for(j=0;j< i+1;j++)
        {
            if(i==0 ||j==0 ||i==j)
             {
                q[i][j]= 1;
            }
            else
             {
                q[i][j] = q[i-1][j]+ q[i-1][j-1];
            }
        }
    }
return q;
}


/*
[1]
1-[1,1]  (1,0)  (1,1)
2-[1,2,1]  (2,0)  (2,1) (2,2)
[1,3,3,1]  (3,0)  (3,1) (3,2) (3,3)
[1,4,6,4,1] (4,0) (4,1) (4,2) (4,3) (4,4)

i=0||j=0||i=j
n[i][j]=1;

else
n[i][j]=n[i-1][j]+n[i-1][j-1];*/

